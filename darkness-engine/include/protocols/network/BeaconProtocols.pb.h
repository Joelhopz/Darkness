// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BeaconProtocols.proto

#ifndef PROTOBUF_BeaconProtocols_2eproto__INCLUDED
#define PROTOBUF_BeaconProtocols_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_BeaconProtocols_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsBeaconHelloImpl();
void InitDefaultsBeaconHello();
inline void InitDefaults() {
  InitDefaultsBeaconHello();
}
}  // namespace protobuf_BeaconProtocols_2eproto
class BeaconHello;
class BeaconHelloDefaultTypeInternal;
extern BeaconHelloDefaultTypeInternal _BeaconHello_default_instance_;

enum BeaconHello_BeaconType {
  BeaconHello_BeaconType_Server = 0,
  BeaconHello_BeaconType_Client = 1,
  BeaconHello_BeaconType_BeaconHello_BeaconType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BeaconHello_BeaconType_BeaconHello_BeaconType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BeaconHello_BeaconType_IsValid(int value);
const BeaconHello_BeaconType BeaconHello_BeaconType_BeaconType_MIN = BeaconHello_BeaconType_Server;
const BeaconHello_BeaconType BeaconHello_BeaconType_BeaconType_MAX = BeaconHello_BeaconType_Client;
const int BeaconHello_BeaconType_BeaconType_ARRAYSIZE = BeaconHello_BeaconType_BeaconType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BeaconHello_BeaconType_descriptor();
inline const ::std::string& BeaconHello_BeaconType_Name(BeaconHello_BeaconType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BeaconHello_BeaconType_descriptor(), value);
}
inline bool BeaconHello_BeaconType_Parse(
    const ::std::string& name, BeaconHello_BeaconType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BeaconHello_BeaconType>(
    BeaconHello_BeaconType_descriptor(), name, value);
}
enum BeaconHello_BeaconAction {
  BeaconHello_BeaconAction_Entering = 0,
  BeaconHello_BeaconAction_Leaving = 1,
  BeaconHello_BeaconAction_Alive = 2,
  BeaconHello_BeaconAction_BeaconHello_BeaconAction_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BeaconHello_BeaconAction_BeaconHello_BeaconAction_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BeaconHello_BeaconAction_IsValid(int value);
const BeaconHello_BeaconAction BeaconHello_BeaconAction_BeaconAction_MIN = BeaconHello_BeaconAction_Entering;
const BeaconHello_BeaconAction BeaconHello_BeaconAction_BeaconAction_MAX = BeaconHello_BeaconAction_Alive;
const int BeaconHello_BeaconAction_BeaconAction_ARRAYSIZE = BeaconHello_BeaconAction_BeaconAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* BeaconHello_BeaconAction_descriptor();
inline const ::std::string& BeaconHello_BeaconAction_Name(BeaconHello_BeaconAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    BeaconHello_BeaconAction_descriptor(), value);
}
inline bool BeaconHello_BeaconAction_Parse(
    const ::std::string& name, BeaconHello_BeaconAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BeaconHello_BeaconAction>(
    BeaconHello_BeaconAction_descriptor(), name, value);
}
// ===================================================================

class BeaconHello : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BeaconHello) */ {
 public:
  BeaconHello();
  virtual ~BeaconHello();

  BeaconHello(const BeaconHello& from);

  inline BeaconHello& operator=(const BeaconHello& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeaconHello(BeaconHello&& from) noexcept
    : BeaconHello() {
    *this = ::std::move(from);
  }

  inline BeaconHello& operator=(BeaconHello&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BeaconHello& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeaconHello* internal_default_instance() {
    return reinterpret_cast<const BeaconHello*>(
               &_BeaconHello_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BeaconHello* other);
  friend void swap(BeaconHello& a, BeaconHello& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeaconHello* New() const PROTOBUF_FINAL { return New(NULL); }

  BeaconHello* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BeaconHello& from);
  void MergeFrom(const BeaconHello& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BeaconHello* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BeaconHello_BeaconType BeaconType;
  static const BeaconType Server =
    BeaconHello_BeaconType_Server;
  static const BeaconType Client =
    BeaconHello_BeaconType_Client;
  static inline bool BeaconType_IsValid(int value) {
    return BeaconHello_BeaconType_IsValid(value);
  }
  static const BeaconType BeaconType_MIN =
    BeaconHello_BeaconType_BeaconType_MIN;
  static const BeaconType BeaconType_MAX =
    BeaconHello_BeaconType_BeaconType_MAX;
  static const int BeaconType_ARRAYSIZE =
    BeaconHello_BeaconType_BeaconType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BeaconType_descriptor() {
    return BeaconHello_BeaconType_descriptor();
  }
  static inline const ::std::string& BeaconType_Name(BeaconType value) {
    return BeaconHello_BeaconType_Name(value);
  }
  static inline bool BeaconType_Parse(const ::std::string& name,
      BeaconType* value) {
    return BeaconHello_BeaconType_Parse(name, value);
  }

  typedef BeaconHello_BeaconAction BeaconAction;
  static const BeaconAction Entering =
    BeaconHello_BeaconAction_Entering;
  static const BeaconAction Leaving =
    BeaconHello_BeaconAction_Leaving;
  static const BeaconAction Alive =
    BeaconHello_BeaconAction_Alive;
  static inline bool BeaconAction_IsValid(int value) {
    return BeaconHello_BeaconAction_IsValid(value);
  }
  static const BeaconAction BeaconAction_MIN =
    BeaconHello_BeaconAction_BeaconAction_MIN;
  static const BeaconAction BeaconAction_MAX =
    BeaconHello_BeaconAction_BeaconAction_MAX;
  static const int BeaconAction_ARRAYSIZE =
    BeaconHello_BeaconAction_BeaconAction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BeaconAction_descriptor() {
    return BeaconHello_BeaconAction_descriptor();
  }
  static inline const ::std::string& BeaconAction_Name(BeaconAction value) {
    return BeaconHello_BeaconAction_Name(value);
  }
  static inline bool BeaconAction_Parse(const ::std::string& name,
      BeaconAction* value) {
    return BeaconHello_BeaconAction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .BeaconHello.BeaconType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::BeaconHello_BeaconType type() const;
  void set_type(::BeaconHello_BeaconType value);

  // .BeaconHello.BeaconAction action = 4;
  void clear_action();
  static const int kActionFieldNumber = 4;
  ::BeaconHello_BeaconAction action() const;
  void set_action(::BeaconHello_BeaconAction value);

  // @@protoc_insertion_point(class_scope:BeaconHello)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  int type_;
  int action_;
  mutable int _cached_size_;
  friend struct ::protobuf_BeaconProtocols_2eproto::TableStruct;
  friend void ::protobuf_BeaconProtocols_2eproto::InitDefaultsBeaconHelloImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BeaconHello

// string ip = 1;
inline void BeaconHello::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BeaconHello::ip() const {
  // @@protoc_insertion_point(field_get:BeaconHello.ip)
  return ip_.GetNoArena();
}
inline void BeaconHello::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BeaconHello.ip)
}
#if LANG_CXX11
inline void BeaconHello::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BeaconHello.ip)
}
#endif
inline void BeaconHello::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BeaconHello.ip)
}
inline void BeaconHello::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BeaconHello.ip)
}
inline ::std::string* BeaconHello::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:BeaconHello.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeaconHello::release_ip() {
  // @@protoc_insertion_point(field_release:BeaconHello.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeaconHello::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:BeaconHello.ip)
}

// string id = 2;
inline void BeaconHello::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BeaconHello::id() const {
  // @@protoc_insertion_point(field_get:BeaconHello.id)
  return id_.GetNoArena();
}
inline void BeaconHello::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BeaconHello.id)
}
#if LANG_CXX11
inline void BeaconHello::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BeaconHello.id)
}
#endif
inline void BeaconHello::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BeaconHello.id)
}
inline void BeaconHello::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BeaconHello.id)
}
inline ::std::string* BeaconHello::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:BeaconHello.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeaconHello::release_id() {
  // @@protoc_insertion_point(field_release:BeaconHello.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeaconHello::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:BeaconHello.id)
}

// .BeaconHello.BeaconType type = 3;
inline void BeaconHello::clear_type() {
  type_ = 0;
}
inline ::BeaconHello_BeaconType BeaconHello::type() const {
  // @@protoc_insertion_point(field_get:BeaconHello.type)
  return static_cast< ::BeaconHello_BeaconType >(type_);
}
inline void BeaconHello::set_type(::BeaconHello_BeaconType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:BeaconHello.type)
}

// .BeaconHello.BeaconAction action = 4;
inline void BeaconHello::clear_action() {
  action_ = 0;
}
inline ::BeaconHello_BeaconAction BeaconHello::action() const {
  // @@protoc_insertion_point(field_get:BeaconHello.action)
  return static_cast< ::BeaconHello_BeaconAction >(action_);
}
inline void BeaconHello::set_action(::BeaconHello_BeaconAction value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:BeaconHello.action)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::BeaconHello_BeaconType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BeaconHello_BeaconType>() {
  return ::BeaconHello_BeaconType_descriptor();
}
template <> struct is_proto_enum< ::BeaconHello_BeaconAction> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BeaconHello_BeaconAction>() {
  return ::BeaconHello_BeaconAction_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BeaconProtocols_2eproto__INCLUDED
